/*
 * globals.c
 *
 *  Created on: Sep 16, 2016
 *      Author: superman
 */

// Demonstrates one way to handle globals safely in C.
#include "globals.h"

#define BULLET_COUNT 4
#define BULLET_TYPES 6

#define ALIEN_ROWS 5

#define BUNKER_COUNT 4

#define ALIEN_ROW_MSB 0x800
#define KILL_ALIEN_MASK (0xFFFFF7FF)

// Here are the globals.
static point_t tankPosition;
static point_t tankBulletPosition;
static point_t alienBlockPosition;
static uint16_t alienPositions[ALIEN_ROWS]; // low 11 bits of each word represent each alien in a row -- 1 = alive, 0 = dead
static bullet_t alienBullets[BULLET_COUNT];
static bool alienPosIn; // Keeps track of whether the aliens are "in" or "out" -- 1 = in, 0 = out
static bunker_t bunkers[BUNKER_COUNT];
static uint8_t current_lives;
static uint16_t current_score;



// Here are the accessors.
void global_setTankPositionGlobal(uint16_t x, uint16_t y) {
  tankPosition.x = x;
  tankPosition.y = y;
}

point_t global_getTankPositionGlobal() {
  return tankPosition;
}

void global_setTankBulletPosition(uint16_t x, uint16_t y) {
  tankBulletPosition.x = x;
  tankBulletPosition.y = y;
}

point_t global_getTankBulletPosition() {
  return tankBulletPosition;
}

void global_setAlienBlockPosition(uint16_t x, uint16_t y){
	alienBlockPosition.x = x;
	alienBlockPosition.y = y;
}
point_t global_getAlienBlockPosition(){
	return alienBlockPosition;
}

void global_createAlienBullet(uint16_t x, uint16_t y){
	// Initializes a new alien bullet
	int i = 0;
	bool created = false;
	while (!created && i < BULLET_COUNT) {
		if (alienBullets[i].position.y == OFF_SCREEN) {
			alienBullets[i].position.x = x;
			alienBullets[i].position.y = y;
			alienBullets[i].type = x % BULLET_TYPES;
			created = true;
		}
		i++;
	}
}

void global_updateAlienBullet(uint8_t index, uint16_t x, uint16_t y) {
	// Updates an existing alien bullet's position
	alienBullets[index].position.x = x;
	alienBullets[index].position.y = y;
}
bullet_t getAlienBullet(uint8_t index){
	return alienBullets[index];
}
point_t getAlienBulletPosition(uint8_t index){
	return alienBullets[index].position;
}

void erodeBunkerBlock(uint8_t bunker_index, uint8_t block_index){
	if(getBlockState(bunker_index, block_index) != DEAD) {
		bunkers[bunker_index].blocks[block_index].erosion_state++;
	}
}
void initBlockState(uint8_t bunker_index, uint8_t block_index){
	bunkers[bunker_index].blocks[block_index].erosion_state = WHOLE;
}
erosionState_t getBlockState(uint8_t bunker_index, uint8_t block_index){
	return bunkers[bunker_index].blocks[block_index].erosion_state;
}
void setBlockPosition(uint8_t bunker_index, uint8_t block_index, uint8_t x, uint8_t y){
	bunkers[bunker_index].blocks[block_index].position.x = x;
	bunkers[bunker_index].blocks[block_index].position.y = y;
}
point_t getBlockPosition(uint8_t bunker_index, uint8_t block_index){
	return bunkers[bunker_index].blocks[block_index].position;
}



void killAlien(uint8_t row, uint8_t col){
	alienPositions[row] = alienPositions[row] & (KILL_ALIEN_MASK >> col);
}

bool isAlienAlive(uint8_t row, uint8_t col) {
	uint16_t alien_row = alienPositions[row];
	return alien_row & (ALIEN_ROW_MSB >> col);
}

bool isAlienPosIn() {
	return alienPosIn;
}

void setLives(uint8_t lives){
	current_lives = lives;
}
uint8_t getLives(){
	return current_lives;
}

void setScore(uint16_t score){
	current_score = score;
}
void addToScore(uint16_t score){
	current_score += score;
}
uint16_t getScore(){
	return current_score;
}
