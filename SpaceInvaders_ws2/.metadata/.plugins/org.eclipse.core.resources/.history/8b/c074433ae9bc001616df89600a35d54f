/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"
#include "render.h"
#include "globals.h"
#include "control.h"
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include "sound_control.h"
#include "pit_timer.h"
#include "AI.h"
#include "dma.h"
#include "xtmrctr.h"

#define DEBUG
void print(char *str);

#define FRAME_BUFFER_0_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.
#define FRAME_BUFFER_1_ADDR (FRAME_BUFFER_0_ADDR + 4*640*480)
#define SCREEN_SIZE (640*480)

#define ASCII_NUM_OFFSET 48 // Allows us to parse the UART digits as numbers, not characters

#define PARSE_MULTIPLIER 10 // Used in parsing multi-digit number entries

// Push Button Definitions
#define CENTER_BTN 0x01 // GPIO Masks...
#define RIGHT_BTN 0x02
#define DOWN_BTN 0x04
#define LEFT_BTN 0x08
#define UP_BTN 0x10
#define DEBOUNCE_MAX 5 // 5 FIT ticks = 50ms

// Switch Masks
#define SWITCH_1 0x80
#define SWITCH_2 0x40
#define SWITCH_3 0x20

#define GAME_FRAME 0
#define SCREEN_CAPTURE_FRAME 1

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.
XGpio gpSwitch;   // This is a handle for the switches GPIO block.
XTmrCtr * timer;
static uint8_t currentButtonState; // Holds the current value of the push buttons (updated each PB interrupt)
static uint8_t currentSwitchState; // Holds the current value of the push buttons (updated each PB interrupt)

XAxiVdma videoDMAController;
static uint32_t * framePointer0;
static uint32_t * framePointer1;

static uint32_t counter;



void timer_interrupt_handler() {
	static uint8_t switch1_toggle = 0;
	static uint8_t switch2_toggle = 0;

	// Poll switches
	currentSwitchState = XGpio_DiscreteRead(&gpSwitch, 1);  // Get the current state of the switches.

	// Perform DMA based screen capture
	if(currentSwitchState & SWITCH_1) {
		if(!switch1_toggle) {
			switch1_toggle = 1;
			 //void XTmrCtr_Start(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
			DMA_go(XPAR_DMA_0_BASEADDR, FRAME_BUFFER_0_ADDR, FRAME_BUFFER_1_ADDR, SCREEN_SIZE);
			 //void XTmrCtr_Stop(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
			 //XTmrCtr_GetValue(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
			 //xil_printf("Hardware: %d\n\r",  XTmrCtr_GetValue(XTmrCtr * InstancePtr, u8 TmrCtrNumber));
		}
	}
	else {
		switch1_toggle = 0;
	}

	// Perform software screen capture
	if(currentSwitchState & SWITCH_2) {
		if(!switch2_toggle) {
			switch2_toggle = 1;
			 void XTmrCtr_Start(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
			uint32_t i;
			for(i = 0; i < SCREEN_SIZE; i++) {
				framePointer1[i] = framePointer0[i];
			}
			 void XTmrCtr_Stop(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
			 u32 XTmrCtr_GetValue(XTmrCtr * InstancePtr, u8 TmrCtrNumber);
		}
	}
	else {
		switch2_toggle = 0;
	}

	// Display second frame buffer
	if(currentSwitchState & SWITCH_3) {
		if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, SCREEN_CAPTURE_FRAME,  XAXIVDMA_READ)) {
			 xil_printf("vdma parking failed\n\r");
		}
		return;
	}
	else {
		if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, GAME_FRAME,  XAXIVDMA_READ)) {
			 xil_printf("vdma parking failed\n\r");
		}
	}



	// Decrement all counters
	static bool over = false;
	uint8_t finishedTimers = global_decrementTimers(); // return value holds finished timers
	// Check for a game over
	if (global_isGameOver()){
		// Only display the splash screen once
		if(!over){
			// Display the splash screen
			render_gameOver();
			over = true;
		}
		return;
	}
	// Update stuff through controller
	if(finishedTimers & TANK_DEATH_TIMER_MASK) {
		// Keep drawing the tank (it will be displaying the tank explosion at this point)
		render_refreshTank();
		return;
	}
	if(finishedTimers & UFO_ENTRY_TIMER_MASK) {
		// Cause the UFO to re-enter the screen
		global_startUFO();
	}
	if(finishedTimers & ALIEN_MOVE_TIMER_MASK) {
		// Move the aliens
		control_updateAlienBlock();
	}
	if(finishedTimers & TANK_MOVE_TIMER_MASK) {
		// Execute AI
		AI_update();

		// Move the tank
		control_updateTank();

		// Redraw the tank
		render_refreshTank();
	}
	if(finishedTimers & BULLET_UPDATE_TIMER_MASK) {
		// Update all bullets and bullet collisions
		control_manageBullets();
		// Redraw the bullets
		render_bullets();
	}
	if(finishedTimers & FLASHING_TIMER_MASK) {
		// The flashing explosion or score is done...
		render_eraseAlien();	// Erase the alien explosion
		render_eraseUFOScore(); // Erase the UFO score
	}
	if(finishedTimers & UFO_MOVE_TIMER_MASK) {
		// Move the UFO
		global_moveUFO();
		// Redraw the UFO
		render_UFO();
	}
	if(finishedTimers & ALIEN_SHOOT_TIMER_MASK) {
		// Shoot an alien bullet
		control_fireAlienBullet();
	}


}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // Check which buttons are high/low
  if((currentButtonState & CENTER_BTN)) { // If center button is pressed...
	  // Shoot bullet
	  if(!global_isGameOver()){
		  global_fireTankBullet();
	  }
  }

  if(currentButtonState & RIGHT_BTN) { // If right button is pressed...
	  // Move the tank right
	  global_setTankDirection(RIGHT);
  }

  if(currentButtonState & DOWN_BTN) { // If down button is pressed...
      // Decrease the volume
	  sound_control_decreaseVolume();
  }

  if(currentButtonState & LEFT_BTN) { // If left button is pressed...
	  // Move the tank left
	  global_setTankDirection(LEFT);
  }

  if(currentButtonState & UP_BTN) { // If up button is pressed...
	  // Increase the volume
	  sound_control_increaseVolume();
  }

  // When neither or both buttons are pressed, keep the tank stopped
  if(!((currentButtonState & LEFT_BTN) ^ (currentButtonState & RIGHT_BTN))){
	  global_setTankDirection(STOPPED);
  }
  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Handles interrupts from the AC97 sound controller
void sound_interrupt_handler() {
	// Load and mix the appropriate sounds into a local buffer
	load_sound_buffer();
	// Load that buffer into the sound FIFO
	sound_control_load_sound();
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is the timer_interrupt_handler() called after ack'ing the interrupt controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
//	 // Check the PIT interrupt first.
//	if (intc_status & XPAR_PITIMER_0_MYINTERRUPT_MASK){
//		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PITIMER_0_MYINTERRUPT_MASK);
//		timer_interrupt_handler();
//	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
	// Check the sound controller.
	if (intc_status & XPAR_AXI_AC97_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_AC97_0_INTERRUPT_MASK);
		sound_interrupt_handler();
	}
}

int main()
{
	init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.

	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
    XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
    // Step 2: Initialize the memory structure and the hardware.
    if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
    	xil_printf("VideoDMA Did not initialize.\r\n");
    }
    // Step 3: (optional) set the frame store number.
    if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
    	xil_printf("Set Frame Store Failed.");
    }
    // Initialization is complete at this point.

    // Setup the frame counter. We want two read frames. We don't need any write frames but the
    // function generates an error if you set the write frame count to 0. We set it to 2
    // but ignore it because we don't need a write channel at all.
    XAxiVdma_FrameCounter myFrameConfig;
    myFrameConfig.ReadFrameCount = 2;
    myFrameConfig.ReadDelayTimerCount = 10;
    myFrameConfig.WriteFrameCount =2;
    myFrameConfig.WriteDelayTimerCount = 10;
    Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
    if (Status != XST_SUCCESS) {
	   xil_printf("Set frame counter failed %d\r\n", Status);
	   if(Status == XST_VDMA_MISMATCH_ERROR);
		   xil_printf("DMA Mismatch Error\r\n");
    }
    // Now we tell the driver about the geometry of our frame buffer and a few other things.
    // Our image is 480 x 640.
    XAxiVdma_DmaSetup myFrameBuffer;
    myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
    myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
    myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
    myFrameBuffer.FrameDelay = 0;
    myFrameBuffer.EnableCircularBuf=1;
    myFrameBuffer.EnableSync = 0;
    myFrameBuffer.PointNum = 0;
    myFrameBuffer.EnableFrameCounter = 0;
    myFrameBuffer.FixedFrameStoreAddr = 0;
    if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
    	xil_printf("DMA Config Failed\r\n");
     }
    // We need to give the frame buffer pointers to the memory that it will use. This memory
    // is where you will write your video data. The vdma IP/driver then streams it to the HDMI
    // IP.
     myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_0_ADDR;
     myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_0_ADDR + 4*640*480;

     if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
    		               myFrameBuffer.FrameStoreStartAddr)) {
    	 xil_printf("DMA Set Address Failed Failed\r\n");
     }
     // Print a sanity message if you get this far.
     xil_printf("Woohoo! I made it through initialization.\n\r");
     // Now, let's get ready to start displaying some stuff on the screen.
     // The variables framePointer and framePointer1 are just pointers to the base address
     // of frame 0 and frame 1.
     framePointer0 = (uint32_t *) FRAME_BUFFER_0_ADDR;
     framePointer1 = (uint32_t *) FRAME_BUFFER_1_ADDR;

     // This tells the HDMI controller the resolution of your display (there must be a better way to do this).
     XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);

     // Start the DMA for the read channel only.
     if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
    	 xil_printf("DMA START FAILED\r\n");
     }
     int frameIndex = 0;
     // We have two frames, let's park on frame 0. Use frameIndex to index them.
     // Note that you have to start the DMA process before parking on a frame.
     if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
    	 xil_printf("vdma parking failed\n\r");
     }

	// Initialize the game
     render_blankScreen(framePointer0); // Blank the screen
     render_init();		// Initialize the renderer
     control_init();	// Initialize control stuff
     globals_init();	// Initialize global values
     sound_control_init(); // Initialize the sound control
	
	// Initialize the PIT
     pit_timer_init(); // Initialize values
     pit_timer_loopOn(); // Turn looping on
     pit_timer_enableInt(); // Turn interrupts on
     pit_timer_start(); // Start the timer

     XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
     // Set the push button peripheral to be inputs.
	 XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
     // Enable the global GPIO interrupt for push buttons.
	 XGpio_InterruptGlobalEnable(&gpPB);
	 // Enable all interrupts in the push button peripheral.
	 XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

     XGpio_Initialize(&gpSwitch, XPAR_AXI_GPIO_0_DEVICE_ID);
     // Set the push button peripheral to be inputs.
	 XGpio_SetDataDirection(&gpSwitch, 1, 0x000000FF);

	 XTmrCtr_Initialize(timer, XPAR_AXI_TIMER_0_DEVICE_ID);
	 // Set up interrupts
	 microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	 XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK | XPAR_AXI_AC97_0_INTERRUPT_MASK));
	 XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	 xil_printf("start\n\r");
	 microblaze_enable_interrupts();



	 char input;
	 uint32_t set_value = 0;
	 while (1) {
		 // Get input from the keyboard
		 input = getchar();
		 // As long as the input is a digit, keep processing
		 if(input >= '0' && input <= '9'){
			 // Get the numeric value of the digit
			 uint8_t value = ((uint8_t)input) - ASCII_NUM_OFFSET;
			 // Append the digit to the current value
			 set_value = set_value *PARSE_MULTIPLIER + value;
		 }
		 // If any other key is pressed, set the previously entered numbers into the timer
		 else {
			 // As long as the value is not zero
			 if(set_value != 0){
				 // Set the timer to the entered value
				 pit_timer_setTimer(set_value);
				 // Reset the input value
				 set_value = 0;
			 }
		 }
		 // Increment that utilization counter
		 counter++;
	 }
     cleanup_platform();

    return 0;
}

