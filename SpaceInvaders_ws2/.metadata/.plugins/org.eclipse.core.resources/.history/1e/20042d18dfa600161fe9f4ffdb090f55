/*
 * AI.c
 *
 *  Created on: Nov 9, 2016
 *      Author: superman
 */

#include "globals.h"
#include <stdbool.h>
#include <stdio.h>

// Space Invaders AI Pseudo-code
typedef enum { SAFE, UNSAFE, SHOOT_ALIEN, SHOOT_SAUCER }SpotType_t;
SpotType_t tankSpots[SCREEN_WIDTH];

void AI_safeSpotTest() {
	// ==================== Safe spots
	// Find unsafe spots
	point_t tank_pos = global_getTankPosition();
	uint8_t i;
	for (i = 0; i < BULLET_COUNT; i++) {
	  // Check if the bullet is currently on screen
	  point_t bullet_pos = global_getAlienBulletPosition(i);
	  if(bullet_pos.x != OFF_SCREEN) {
		// When the tank can no longer remain in this position or cannot safely move past this position, it is not safe
		//      ** We are assuming that the tank will always evade when possible...
		// -- Calculate how long it will take bullet to hit x
		int32_t bulletHitTime = BULLET_UPDATE_TIMER_MAX * (TANK_INIT_Y - (bullet_pos.y + BULLET_HEIGHT)) / BULLET_SPEED;

		// Measure these from middle of tank... (?)
		// TODO: take into account other bullets (other unsafe spots)
		uint16_t tankMoveDistance = TANK_SPEED * bulletHitTime / TANK_MOVE_TIMER_MAX;

		// Test the tank predicted position
		if((tank_pos.x + tankMoveDistance <= bullet_pos.x && tank_pos.x + TANK_WIDTH + tankMoveDistance >= bullet_pos.x) ||
				(tank_pos.x - tankMoveDistance <= bullet_pos.x && tank_pos.x + TANK_WIDTH - tankMoveDistance >= bullet_pos.x)) {
			int16_t j;
			// Mark the unsafe tank_x positions
			for(j = bullet_pos.x - TANK_WIDTH - 1; j <= bullet_pos.x + 1; j++) {
				if(j >= 0 && j < SCREEN_WIDTH) {
					tankSpots[j] = UNSAFE;
				}
			}
		}
	  }
	}

	// Move towards nearest safe spot
	if(tankSpots[tank_pos.x] == UNSAFE) {
		bool safeSpotFound = false;
		uint16_t offset = TANK_SPEED;
		while(!safeSpotFound) {
			// Do bounds checking here
			if(offset > SCREEN_WIDTH / 2) {
				xil_printf("ERROR: Offset too big!\n\r");
			}

			if((tank_pos.x + offset + TANK_WIDTH) < SCREEN_WIDTH && tankSpots[tank_pos.x + offset] != UNSAFE) {
				// Move right

				safeSpotFound = true;
				break;
			}
			else if((tank_pos.x - offset) >= 0 && tankSpots[tank_pos.x - offset] != UNSAFE) {
				// Move left

				safeSpotFound = true;
				break;
			}
			offset += TANK_SPEED;
		}
	}
}
