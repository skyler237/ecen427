/*
 * globals.h
 *
 *  Created on: Sep 16, 2016
 *      Author: superman
 */

#ifndef GLOBALS_H_
#define GLOBALS_H_

#include <stdint.h>
#include <stdbool.h>

#define OFF_SCREEN 700 //Denotes an off-screen point

//===================================================
//				Global constants
//===================================================

// Init value constants
#define TANK_INIT_X ((SCREEN_WIDTH - TANK_WIDTH)/2)				// Tank initial x position
#define TANK_INIT_Y (SCREEN_HEIGHT -20)							// Tank initial y position

// Screen constants
#define SCREEN_WIDTH 320	// Screen width in game pixels
#define SCREEN_HEIGHT 240	// Screen height in game pixels

// Alien constants
#define ALIEN_ROWS 5		// Number of alien rows
#define ALIEN_COLS 11		// Number of alien constants
#define ALIEN_ROW_MAX (ALIEN_ROWS - 1)	// Max row index (0 indexed)
#define ALIEN_COL_MAX (ALIEN_COLS - 1)	// Max col index (0 indexed)
#define ALIEN_WIDTH 12		// Alien sprite width
#define ALIEN_HEIGHT 8		// Alien sprite height
#define ALIEN_X_SPACING (ALIEN_WIDTH + 4)	// Difference in x from one alien position to the next
#define ALIEN_Y_SPACING (ALIEN_HEIGHT + 6)	// Difference in y from one alien position to the next
#define ALIEN_BLOCK_WIDTH (ALIEN_X_SPACING*ALIEN_COLS - 4)	// Total width of the alien block
#define ALIEN_BLOCK_HEIGHT (ALIEN_Y_SPACING*ALIEN_ROWS - 6)	// Total height of the alien block
#define TOP_ALIEN_ROW 0			// Top alien row index
#define MID_ALIEN_ROW 1			// Middle two rows starting index
#define BOTTOM_ALIEN_ROW 3		// Bottow two rows starting index
#define UFO_ID	5				// Identifies the UFO

// Tank constants
#define TANK_WIDTH 15		// Tank sprite width
#define TANK_HEIGHT 8		// Tank sprite height
#define TANK_SPEED 2

// Bunker constants
#define BUNKER_0 0	// Bunker index values
#define BUNKER_1 1
#define BUNKER_2 2
#define BUNKER_3 3
#define BUNKER_BLOCK_ROWS 3	// Number of rows of blocks in a bunker
#define BUNKER_BLOCK_COLS 4	// Number of columns of blocks in a bunker
#define BUNKER_0_X (SCREEN_WIDTH/4*0.5 - BUNKER_WIDTH/2)	// Bunker 0 initial x position
#define BUNKER_1_X (SCREEN_WIDTH/4*1.5 - BUNKER_WIDTH/2)	// Bunker 1 initial x position
#define BUNKER_2_X (SCREEN_WIDTH/4*2.5 - BUNKER_WIDTH/2)	// Bunker 2 initial x position
#define BUNKER_3_X (SCREEN_WIDTH/4*3.5 - BUNKER_WIDTH/2)	// Bunker 3 initial x position
#define BUNKER_Y (TANK_INIT_Y - 40)		// All bunkers initial y value
#define BUNKER_WIDTH 24		// Full bunker sprite width
#define BUNKER_HEIGHT 18	// Full bunker sprite height
#define BUNKER_COUNT 4		// Number of bunkers in the game
#define BUNKER_BLOCK_CNT 12 // Really only 10, but blocks 9 and 10 (0 indexed) are initialized to dead
#define BUNKER_BLOCK_SIZE 6	// Size of a bunker block (in pixels) - width = height = size
// These two blocks are set as "invisible" -- using 12 blocks makes indexing easier
#define INVISIBLE_BLOCK_1 9	 // These blocks will always be set to DEAD
#define INVISIBLE_BLOCK_2 10

// Bullet constants
#define BULLET_HEIGHT 5		// Height of bullet sprite
#define BULLET_COUNT 4		// Number of alien bullets
#define TANK_BULLET_WIDTH 1			// Tank bullet sprite height
#define ALIEN_BULLET_WIDTH 3		// Width of alien bullet sprites

// Status bar constants
#define STATUS_BAR_Y 10		// Y value of the status bar (top)
#define TEXT_HEIGHT 5		// General height of text for the status bar text sprites

#define BASE_LINE_Y (SCREEN_HEIGHT - 5)	// Y value of the base line

//Ticks between switching which guise the dead tank is in
#define SWITCH_DEATH_SPRITE 5
#define DEATH_GUISES 2
#define REVIVE_TANK 1

#define UFO_WIDTH 16
#define UFO_HEIGHT 7
#define UFO_Y 45
#define UFO_LEFT (-UFO_WIDTH)
#define UFO_RIGHT (SCREEN_WIDTH)
#define UFO_SPEED 2
#define UFO_COLOR 0x00FF0000

// Timer values
#define TANK_DEATH_TIMER_MASK 0x01
#define UFO_ENTRY_TIMER_MASK 0x02
#define ALIEN_MOVE_TIMER_MASK 0x04
#define TANK_MOVE_TIMER_MASK 0x08
#define BULLET_UPDATE_TIMER_MASK 0x10
#define FLASHING_TIMER_MASK 0x20
#define UFO_MOVE_TIMER_MASK 0x40
#define ALIEN_SHOOT_TIMER_MASK 0x80
// Each tick is 10 ms
#define TANK_DEATH_TIMER_MAX 100
#define UFO_ENTRY_TIMER_MIN 1*100
#define UFO_ENTRY_TIMER_RANGE 1*100
#define ALIEN_MOVE_TIMER_MAX 50
#define ALIEN_SHOOT_TIMER_RANGE 4*100
#define ALIEN_SHOOT_TIMER_MIN 1*100
#define TANK_MOVE_TIMER_MAX 3
#define BULLET_UPDATE_TIMER_MAX 5
#define FLASHING_TIMER_MAX 25
#define UFO_MOVE_TIMER_MAX 7

// A point will keep track of an x,y position and a previous x,y position
typedef struct {int16_t x; int16_t y; int16_t prev_x; int16_t prev_y;} point_t;

// Keeps track of the guise types for alien bullets (also accounts for state)
typedef enum { CROSS_UP, CROSS_DOWN, CROSS_MID2UP, CROSS_MID2DOWN, LIGHTNING1, LIGHTNING2 } bulletType_t;

// Keeps track of the erosion status of a bunker block
typedef enum  {WHOLE, HIT1, HIT2, HIT3, DEAD} erosionState_t;

// Different movement states of the tank
typedef enum {LEFT=-1, RIGHT=1, STOPPED=0} tankMotion_t;

// Initializes all positions and other relevant game data
void globals_init();

// Sets the tank position and updates previous position
void global_setTankPosition(int16_t x, int16_t y);
// Moves the tank by dx and dy
void global_moveTank(int8_t dx, int8_t dy);
// Sets the tank motion
void global_setTankDirection(tankMotion_t direction);
// Gets the tank motion
tankMotion_t global_getTankDirection();
// Returns the tank position point
point_t global_getTankPosition();
void global_killTank();
uint32_t global_getDeathTimer();
// Returns true if the tank is dead (counter is running)
bool global_isTankDead();

// Sets the tank bullet position
void global_setTankBulletPosition(uint16_t x, uint16_t y);
// Moves the tank bullet by dx and dy
void global_moveTankBullet(int8_t dx, int8_t dy);
// Moves the tank bullet off screen
void global_collideTankBullet();
// Fires a tank bullet
void global_fireTankBullet();
// Returns the tank bullet position
point_t global_getTankBulletPosition();

// Sets the alien block position (upper left corner)
void global_setAlienBlockPosition(uint16_t x, uint16_t y);
// Moves the alien block position by dx and dy
void global_moveAlienBlock(uint16_t dx, uint16_t dy);
// Returns the alien block position
point_t global_getAlienBlockPosition();
// Returns the position of the specified alien
point_t global_getAlienPosition(uint8_t row, uint8_t col);

// Creates a new alien bullet, but only if one is available
void global_createAlienBullet(uint8_t row, uint8_t col);
// Updates an existing alien bullet's position
void global_moveAlienBullet(uint8_t index,int16_t dx, int16_t dy);
//Moves the alien bullet off screen
void global_collideAlienBullet(uint8_t index);
// Return the type of an alien bullet
bulletType_t global_getAlienBulletType(uint8_t index);
// Return the position of an alien bullet
point_t global_getAlienBulletPosition(uint8_t index);

// Increases the erosion state of a given block
void global_erodeBunkerBlock(uint8_t bunker_index, uint8_t block_index);
// Returns the erosion state of the given block
erosionState_t global_getBlockState(uint8_t bunker_index, uint8_t block_index);
// Sets the block state
void global_setBlockState(uint8_t bunker_index, uint8_t block_index, erosionState_t state);
// Returns the bunker block position of the given block
point_t global_getBlockPosition(uint8_t bunker_index, uint8_t block_index);
// Returns the position of a given bunker
point_t global_getBunkerPosition(uint8_t bunker_index);
// Sets a bunker position
void global_setBunkerPosition(uint8_t bunker_index, uint8_t x, uint8_t y);

// Kills a given alien
void global_killAlien(uint8_t row, uint8_t col);
// Checks to see if the give alien is alive
bool global_isAlienAlive(uint8_t row, uint8_t col);
// Returns whether or not the alien guises are the "inward" or "outward" type
bool global_isAlienPoseIn();
// Toggles the alien position between in and out
void global_toggleAlienPose();
//Sets the timer to erase alien explosions
void global_setFlashingTimer();

// Sets the current life count
void global_setLives(uint8_t lives);
// Returns the current life count
uint8_t global_getLives();

// Sets the current score
void global_setScore(uint16_t score);
// Increments the current score by the proper amount, based on the row hit
uint16_t global_incrementScore(uint8_t alien_row);
// Returns the current score
uint16_t global_getScore();

void global_startUFO();
void global_moveUFO();
point_t global_getUFOPosition();
void global_killUFO();

// Decrements all timers and does not overflow past zero
uint8_t global_decrementTimers();


#endif /* GLOBALS_H_ */
