/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"
#include "render.h"
#include "globals.h"
#include "control.h"
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include "xgpio.h"          // Provides access to PB GPIO driver.

#define DEBUG
void print(char *str);

#define FRAME_BUFFER_0_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.
#define MAX_SILLY_TIMER 10000000;

#define ASCII_NUM_OFFSET 48
#define TANK_SPEED 1

// Push Button Definitions
#define CENTER_BTN 0x01 // GPIO Masks...
#define RIGHT_BTN 0x02
#define DOWN_BTN 0x04
#define LEFT_BTN 0x08
#define UP_BTN 0x10
#define DEBOUNCE_MAX 5 // 5 FIT ticks = 50ms

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.

void timer_interrupt_handler() {
	// Decrement all counters
	uint8_t finshedTimers = global_decrementTimers(); // return value holds finished timers

	// Update stuff through controller
	if(finishedTimers & TANK_DEATH_TIMER_MASK) {
		render_refreshTank();
		return;
	}
	if(finishedTimers & UFO_ENTRY_TIMER_MASK) {

	}
	if(finishedTimers & ALIEN_MOVE_TIMER_MASK) {
		// Move the aliens
		control_updateAlienBlock();
	}
	if(finishedTimers & TANK_MOVE_TIMER_MASK) {
		// Move the tank
		control_updateTank();
	}
	if(finishedTimers & BULLET_UPDATE_TIMER_MASK) {

	}
	if(finishedTimers & FLASHING_TIMER_MASK) {

	}
	if(finishedTimers & UFO_MOVE_TIMER_MASK) {

	}
	if(finishedTimers & ALIEN_SHOOT_TIMER_MASK) {

	}
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // Check which buttons are high/low
  if(!(currentButtonState & CENTER_BTN)) { // If center button is not pressed...
	  // Clear the debounce timer
	  centerBtnDebounceCounter = 0;
  }

  if(currentButtonState & RIGHT_BTN) { // If right button is not pressed...
	  global_setTankDirection(RIGHT);
  }

  if(!(currentButtonState & DOWN_BTN)) { // If down button is not pressed...

  }

  if(currentButtonState & LEFT_BTN) { // If left button is not pressed...
	  // Clear the debounce timer
	  leftBtnDebounceCounter = 0;
  }

  if(!(currentButtonState & UP_BTN)) { // If up button is not pressed...
	  global_setTankDirection(LEFT);
  }

  if(!((currentButtonState & LEFT_BTN) ^ (currentButtonState & RIGHT_BTN))){
	  global_setTankDirection(STOPPED);
  }
  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is the timer_interrupt_handler() called after ack'ing the interrupt controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
}

int main()
{
	init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.
	XAxiVdma videoDMAController;
	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
    XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
    // Step 2: Initialize the memory structure and the hardware.
    if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
    	xil_printf("VideoDMA Did not initialize.\r\n");
    }
    // Step 3: (optional) set the frame store number.
    if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
    	xil_printf("Set Frame Store Failed.");
    }
    // Initialization is complete at this point.

    // Setup the frame counter. We want two read frames. We don't need any write frames but the
    // function generates an error if you set the write frame count to 0. We set it to 2
    // but ignore it because we don't need a write channel at all.
    XAxiVdma_FrameCounter myFrameConfig;
    myFrameConfig.ReadFrameCount = 2;
    myFrameConfig.ReadDelayTimerCount = 10;
    myFrameConfig.WriteFrameCount =2;
    myFrameConfig.WriteDelayTimerCount = 10;
    Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
    if (Status != XST_SUCCESS) {
	   xil_printf("Set frame counter failed %d\r\n", Status);
	   if(Status == XST_VDMA_MISMATCH_ERROR);
		   xil_printf("DMA Mismatch Error\r\n");
    }
    // Now we tell the driver about the geometry of our frame buffer and a few other things.
    // Our image is 480 x 640.
    XAxiVdma_DmaSetup myFrameBuffer;
    myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
    myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
    myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
    myFrameBuffer.FrameDelay = 0;
    myFrameBuffer.EnableCircularBuf=1;
    myFrameBuffer.EnableSync = 0;
    myFrameBuffer.PointNum = 0;
    myFrameBuffer.EnableFrameCounter = 0;
    myFrameBuffer.FixedFrameStoreAddr = 0;
    if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
    	xil_printf("DMA Config Failed\r\n");
     }
    // We need to give the frame buffer pointers to the memory that it will use. This memory
    // is where you will write your video data. The vdma IP/driver then streams it to the HDMI
    // IP.
     myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_0_ADDR;
     myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_0_ADDR + 4*640*480;

     if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
    		               myFrameBuffer.FrameStoreStartAddr)) {
    	 xil_printf("DMA Set Address Failed Failed\r\n");
     }
     // Print a sanity message if you get this far.
     xil_printf("Woohoo! I made it through initialization.\n\r");
     // Now, let's get ready to start displaying some stuff on the screen.
     // The variables framePointer and framePointer1 are just pointers to the base address
     // of frame 0 and frame 1.
     uint32_t * framePointer0 = (uint32_t *) FRAME_BUFFER_0_ADDR;

     // This tells the HDMI controller the resolution of your display (there must be a better way to do this).
     XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);

     // Start the DMA for the read channel only.
     if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
    	 xil_printf("DMA START FAILED\r\n");
     }
     int frameIndex = 0;
     // We have two frames, let's park on frame 0. Use frameIndex to index them.
     // Note that you have to start the DMA process before parking on a frame.
     if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
    	 xil_printf("vdma parking failed\n\r");
     }

     render_blankScreen(framePointer0);
     render_init();
     control_init();

     // Set the push button peripheral to be inputs.
	 XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
     // Enable the global GPIO interrupt for push buttons.
	 XGpio_InterruptGlobalEnable(&gpPB);
	 // Enable all interrupts in the push button peripheral.
	 XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

	 microblaze_register_handler(interrupt_handler_dispatcher, NULL);
	 XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
			(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
	 XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
	 microblaze_enable_interrupts();

     char input;
     while (1) {
         frameIndex = 0;  	// Only use frame0

         if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
        	 xil_printf("vdma parking failed\n\r");
         }
		 // Get input from keyboard
         input = getchar();
         uint8_t tank_diff = TANK_SPEED;
         uint8_t tens;
         uint8_t ones;
         switch(input) {
         case '3': // Fire alien bullet
        	 control_fireAlienBullet(framePointer0);
        	 render_bullets(framePointer0);
        	 break;

         case '4': // Move Left
        	 global_moveTank(-tank_diff, 0);
        	 render_refreshTank(framePointer0);
        	 break;

         case '5': // Fire tank bullet
        	 global_fireTankBullet();
        	 render_bullets(framePointer0);
        	 break;

         case '6':// Move Right
        	 global_moveTank(tank_diff, 0);
        	 render_refreshTank(framePointer0);
        	 break;

         case '7': // Erode bunker
        	 input = getchar() - ASCII_NUM_OFFSET;
        	 uint8_t i;
        	 for(i=0; i < BUNKER_BLOCK_CNT; i++) {
        		 global_erodeBunkerBlock(input, i);
        		 render_erodeBlock(input, i);
        	 }
        	 break;

         case '8': // Move Aliens
        	 control_updateAlienBlock(framePointer0);
        	 break;

         case '2': // Kill alien
        	 tens = getchar() - ASCII_NUM_OFFSET;
        	 ones = getchar() - ASCII_NUM_OFFSET;
        	 input = 10*tens + ones;

        	 uint8_t row = input / ALIEN_COLS;
        	 uint8_t col = input % ALIEN_COLS;

        	 global_killAlien(row, col);
//        	 render_eraseAlien(row, col);
        	 break;

         case '9': // Update bullets
        	 control_manageBullets(framePointer0);
        	 render_bullets(framePointer0);
        	 break;
         }

     }
     cleanup_platform();

    return 0;
}
